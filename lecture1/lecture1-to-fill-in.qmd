---
title: "Lecture 1"
author: "Marc Kaufmann"
date: "10/01/2024"
output: html
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

This introduction is essentially Chapter 2 from Kieran Healy's book [Data Visualization](http://socviz.co/), which you should read and work through to get a better grasp on the basics. The reason I start with visualization is that it is one of the more fun parts of data analysis making it a great starting point.

This file is a [Quarto](https://quarto.org/) document, which you can render to turn it into an HTML document in RStudio by clicking the 'Render' button. You will create your data reports as Quarto documents, rendered to html as well. To do so, you create a new file in RStudio, enter your name as the author, and choose the html output, which configures things correctly.

You can follow along in the first lecture by typing up the code in the little boxes below and running them there.

### Things to Know about R

There are 4 things to bear in mind about R:

1.  Everything has a name
2.  Everything is an object
3.  You do things using functions
4.  Functions come in packages

#### Everything has a name

Everything that you use in R has a name: variables (including datasets), functions, or special reserved words. That is the way you talk about them. Here are some examples:

```{r, eval=FALSE}
# Numbers are called by their number, arithmetic operations by their usual symbol
2
2 + 2
7/3
7 %% 3
7 %/% 3
7%/%3
7^2
2*2
3.1
(2 + 2) * 2
2 + (2*2)
2+2 * 2 # BAD! Use spaces or parentheses

# There are some pre-defined variables
pi
'pi'
"pi"
"pi" == 'pi'
pi == 'pi'
TRUE
true
FALSE
True
T
F

# There are also pre-defined functions
c
"c"

```

**Some Notes**:

-   '\#' is the \_\_\_\_\_\_\_\_\_ (EXERCISE) sign. It tells R that everything that follows is a comment and R should ignore it. Comments are there to help explain parts of the code that need additional documentation. We will overuse them initially, but reduce this as the course proceeds.
-   c, "c", and "C" are not the same things
-   Naming conventions: When you name variables and functions, you should use snake case in R.

**Exercise:** For each of the lines in the following code chunk, write in a comment next to it what it returns. I completed the first example for you.

```{r, exercise1, eval=FALSE}
3         # -> 3
7 %% 3    # -> ?
False     # -> ?
'pi'      # -> ?
FALSE     # -> ?
```

**Exercise:** Look up what 'snake case' is and add your answer here.

**Exercise:** What types of names are allowed in R? Look it up and write your answer here as you understand it. Then provide 3 examples of things that are not valid names in R for different reasons.

#### Everything is an object

There are built-in objects and objects you import or create. Most importantly, you assign values to objects you create with the '\<-' operator: a '\<' ('less than') followed by a '-' ('minus' or 'dash').

```{r, assignment, eval=FALSE}
marcs_new_object <- "I am a fancy object"
marcs_new_object
```

One important function to create objects is the $c()$ function, which combines several items into one object:

```{r, eval=FALSE}
marcs_new_combined_object <- c(...)
marcs_new_combined_object
```

In principle, you can use '=' to assign values, but this is very non-idiomatic R. I discourage that you use '=' and will subtract points in assignments for doing so.

**Class Exercise:** Let's start doing something with data. How many of the following programming languages have you *heard* of?

```{r}
# Indent the list
list_of_programming_languages <- c(
  "R",
  "SQL",
  "Racket",
  "Lisp",
  "JavaScript",
  "ECMAScript",
  "Julia",
  "bash",
  "C",
  "Perl",
  "Logo",
  "Scratch", 
  "Rust",
  "Python"
)

list_of_programming_languages

languages_heard_of <- c(20, 19, 0, 0, 19, 1, 3, 4, 16, 1, 1, 5, 1, 1)
languages_heard_of
```

#### You do things using functions

> A function is a thing that does things to things.
>
> Me, paraphrasing Cosma Shalizi

A function is a special object that you can call, such as the function $mean$. It is an object:

```{r}
mean
```

When we *call* it, we put parentheses at the end, and we tell it what to perform its action on:

```{r mean_means}
c(0, 1)
mean(c(0, 10, "pi"))
mean(c(TRUE, FALSE))
mean(TRUE)
```

**Exercise:** What happens if you call the function $mean$ without any arguments, i.e. $mean()$?

#### Functions come in packages

As you may start to realize, lots of functions already exist, such as $mean()$ and $sd()$ and $c()$. There are many more functions that were written by other people and bundled into packages so that you can use them. Many packages come bundled with R from the start (base R), while you can install others on your system via 'install.packages()' and use via 'library()'. We will soon use the 'ggplot()' function. Try using it now:

```{r}
library(ggplot2)
ggplot
```

You will get an error. We first need to import the library:

```{r}
ggplot
```

This tells R to go and get all the objects defined in the library called ggplot2, which includes *ggplot*. This gives us our first data (non-)visualization: a beautifully empty plot.

Think of it as the equivalent of recipe books: you can either experiment and concoct your own recipes, which is fine if you are a cook. Alternatively, you get recipe books from great chefs and follow their instructions. Depending on the type of recipe, you still need a lot of background knowledge — what does it mean to boil, fry, blanch, roast — but you don't have to figure out everything.

### How to figure out what is what

Suppose you have an object $x$ that you don't know what it is. You can do a few things to find out:

```{r, what_is_x}
x <- c(1, 3.0, 2.9)
```

For built-in functions, you can also ask for help or bring up the documentation with 'help()' or '?' or '??':

```{r, what_is_summary}
x
str(x)
class(x)
list("thing", 10, c(0,1))

help("==")
?"=="
?ggplot
??plot
??modulo
ggplot
```

**Exercise:** What do 'class()' and 'str()' do? Use 'help' (or '?'). Don't spend too much time reading the docs. Which description do you find more helpful?

## Exercises (optional)

Commit your knitted assignment2.html to your git and push it to your repository regularly as you make progress. If you struggle *answering* the assignment, ask on Slack.

### Part 1

Read chapter 2 of [Data Visualization](http://socviz.co/gettingstarted.html). Make sure you know where the console is, the editor, and what code chunks are in RStudio.

### Part 2

Complete all the exercises and fill all the holes in the notes of lecture 1. Put your answer to an exercise right after the question of the exercise in the R Markdown file. When done, knit the document, commit the changes with the commit message "Part 1 of assignment 2" and push them to your GitHub repository.

Knit the slides for class 1 to html.

**Note:** If you want to get pdf generation working, the easiest is to install the package `tinytex`. See https://www.rdocumentation.org/packages/tinytex for installation instructions, it is specifically geared towards use in R Markdown files. Pdf and Latex issues can be... interesting shall we say, so ask for help.

**Note:** If you can't figure out how to use git, ask a question on Slack.

### Part 3

You should get in the habit of reading and making sense of error messages, even though initially they might be written in a language you don't understand. Track as many error messages as possible that you received during this week (but stop at 4). Put the code that caused the error in the chunk below, and copy the error message as a comment below it. I provide an example.

```{r, eval=FALSE}

# Example: "4" - "3" leads to the error 'Error in "4" - "3" : non-numeric argument to binary operator'
# Thus you write:
"4" - "3"
# -> Error in "4" - "3" : non-numeric argument to binary operator

# Your examples below
```
